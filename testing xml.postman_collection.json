{
	"info": {
		"_postman_id": "ca6c354a-60e5-4364-b186-0a06575caf56",
		"name": "testing xml",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31361962",
		"_collection_link": "https://api999-0529.postman.co/workspace/Learning--training~bb265e23-c57c-425e-85f2-36d8a7c60b66/collection/31361962-ca6c354a-60e5-4364-b186-0a06575caf56?action=share&source=collection_link&creator=31361962"
	},
	"item": [
		{
			"name": "weather_API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200 and response time is less than 200ms\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.include.all.keys('coord', 'weather', 'main', 'wind', 'clouds', 'sys', 'name');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The weather array contains objects with required properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.weather).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.weather.forEach(function(weatherItem) {\r",
							"        pm.expect(weatherItem).to.be.an('object');\r",
							"        pm.expect(weatherItem).to.have.all.keys('id', 'main', 'description', 'icon');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Temperature values should be greater than or equal to absolute zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const tempValues = [responseData.main.temp, responseData.main.feels_like, responseData.main.temp_min, responseData.main.temp_max];\r",
							"    \r",
							"    tempValues.forEach(temp => {\r",
							"        pm.expect(temp).to.be.at.least(0, \"Temperature value should not be below absolute zero\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The 'timezone' field must be a valid integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.timezone).to.exist.and.to.be.a('number').and.to.be.above(-1, \"Value should be a valid integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response headers include 'Content-Type' as 'application/json'\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body does not contain any error messages or codes\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.cod).to.equal(200, \"Response code should be 200\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The response should not contain a 'data' field\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.not.have.property('data');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Visibility field is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.visibility).to.exist.and.to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Ensure that the 'sys.country' field is a valid non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.sys).to.exist;\r",
							"    pm.expect(responseData.sys.country).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"the city name is\", function(){\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.name).to.be.eql(\"Delhi\")\r",
							"}\r",
							")\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.openweathermap.org/data/2.5/weather?q=delhi&appid=c76e6d1f2e6af75573c66176b1ad5627",
					"protocol": "https",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "q",
							"value": "delhi"
						},
						{
							"key": "appid",
							"value": "c76e6d1f2e6af75573c66176b1ad5627"
						}
					]
				}
			},
			"response": []
		}
	]
}